#Ground up SVM implementation using small dataset(numerical)
import numpy as np # for matrix operations
#to plot our data and model visually
from matplotlib import pyplot as plt


#Step 1 - Define our data

#Input data - Of the form [X value, Y value, Bias term] coordintes in cartesian space
X = np.array([
    [-2,4,-1],
    [4,1,-1],
    [1, 6, -1],
    [2, 4, -1],
    [6, 2, -1],
])

#Array of cooresponding output labels - First 2 examples are labeled '-1' and last 3 are labeled '+1'
y = np.array([-1,-1,1,1,1])


#for each example
for d, sample in enumerate(X):
    if d < 2:# Plot the negative samples (the first 2)
        plt.scatter(sample[0], sample[1], s=120, marker='_', linewidths=2)
    # Plot the positive samples (the last 3)
    else:
        plt.scatter(sample[0], sample[1], s=120, marker='+', linewidths=2)

# Creating a possible hyperplane, which seperates the classes
#plotting two points and drawing the line between them(guess based off of distribution of points shown with matplot)
# This line will be modified with the optimizer
plt.plot([-2,6],[6,0.5])
#gradient descent to learn the seperating hyperplane between both classes
#Optimize objective function by minimizing the loss
def sgd_plot(X, Y):
    #Initialize weight vector with zeros (3 values)
    w = np.zeros(len(X[0]))
    #The learning rate
    eta = 1
    #how many iterations to train for
    epochs = 100000
    #store incorret classifications(can track optimizer)
    errors = []

    #training part and using gradient descent. Using hinge-loss to obtain the max margin
    for epoch in range(1,epochs):
        error = 0
        for i, x in enumerate(X):
            #Case where point is classified incorrectly
            if (Y[i]*np.dot(X[i], w)) < 1: #dot product of X and Y vectors, administers penalty if classified incorrectly
                #update for weights when incorrectly classified
                w = w + eta * ( (X[i] * Y[i]) + (-2  *(1/epoch)* w) ) # Objective function. Regularizer is updated(1/epochs)
                error = 1
            else:
                #correct classification, update weights
                w = w + eta * (-2  *(1/epoch)* w)
        errors.append(error)


    return w #objective function
    for d, sample in enumerate(X):
    # Plot the negative samples
    if d < 2:
        plt.scatter(sample[0], sample[1], s=120, marker='_', linewidths=2)
    # Plot the positive samples
    else:
        plt.scatter(sample[0], sample[1], s=120, marker='+', linewidths=2)

# Add test samples
plt.scatter(2,2, s=120, marker='_', linewidths=2, color='yellow')
plt.scatter(4,3, s=120, marker='+', linewidths=2, color='blue')

# Print the hyperplane calculated by sgd with the points
x2=[w[0],w[1],-w[1],w[0]]
x3=[w[0],w[1],w[1],-w[0]]

x2x3 =np.array([x2,x3])
X,Y,U,V = zip(*x2x3)
ax = plt.gca()
ax.quiver(X,Y,U,V,scale=1, color='blue')
w = sgd_plot(X,y)
